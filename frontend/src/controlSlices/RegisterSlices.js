import {createSlice} from "@reduxjs/toolkit";

const authSlice = createSlice({
       name:"register",
       initialState:{
           loading:false,
           isAuthenticated:false                        
       },
        reducers:{
       RegisterRequest(state,action){
           return{
              ...state,                     
              loading:true                     
           }                        
        } ,
        RegisterSuccess(state,action){
           return{
               loading:false,
               isAuthenticated:true,
               user:action.payload.user                    
           }                        
        },
        RegisterFaild(state,action){
            return{
                loading:false,                   
                ...state, 
                error:action.payload                  
            }                       
        },
        loginRequest(state,action){
             return{
                 loading:true,
                 isAuthenticated:false
             }
        },
        loginSuccess(state,action){
            return{
                loading:false,
                user:action.payload.user,
                isAuthenticated:true
            }
        },
        loginFaild(state,action){
            return{
                loading:false,
                isAuthenticated:false,
                error:action.payload
            }
        },
        logoutRequest(state,action){
            return{
                loading:true,
                isAuthenticated:false
            }
        },
        logoutSuccess(state,action){
            return{
                loading:false,
                logout:action.payload.message,
                isAuthenticated:true
            }
        },
        logoutFaild(state,action){
            return{
                loading:false,
                error:action.payload,
                isAuthenticated:false
            }
        },
        updateRequest(state,action){
            return{
                loading:true,
                isAuthenticated:false
            }
        },
        updateSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
        },
        updateFaild(state,action){
            return{
                ...state,
                isAuthenticated:false,
                error:action.payload
            }
        },
        loaduserRequest(state,action){
            return{
               ...state,
               loading:true,
               isAuthenticated:false                   
            }
        },
        loaduserSuccess(state,action){
            return{
               loading:false,
               isAuthenticated:true,
               user:action.payload.user                    
            }
         },
         loaduserRequestFaild(state,action){
             return{
                 loading:false,
                 isAuthenticated:false,
                 error:action.payload                  
             }                      
         },
         getSingleUSserRequset(state,action){
            return{
                loading:true,
                isAuthenticated:false
            }
         },
         getSingleUSserSuccess(state,action){
            return{
                loading:false,
                isAuthenticated:true,
                user:action.payload.user
            }
         },
         getSingleSUserFaild(state,action){
            return{
                loading:false,
                isAuthenticated:false,
                error:action.payload
            }
         }
        }                           
})

const {actions,reducer} = authSlice;
export const {RegisterRequest,
    RegisterSuccess,
    RegisterFaild,
    loginRequest,
    loginFaild,
    loginSuccess,
    updateRequest,
    updateSuccess,
    updateFaild,

    getSingleSUserFaild,
    getSingleUSserSuccess,
    getSingleUSserRequset,

    logoutRequest,
    logoutFaild,
    logoutSuccess,
    loaduserRequest,
    loaduserRequestFaild,
    loaduserSuccess
}=actions;

export default reducer;